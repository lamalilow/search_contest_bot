import os
from datetime import datetime, timedelta

from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bson import ObjectId

from config import logger
from handlers.contest.responsible_handlers import show_responsible_list
from keyboards.cancel_keyboard import create_cancel_keyboard
from services.database import users_col, contests_col
from utils.role_utils import send_role_keyboard

router = Router()


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
@router.message(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞")
async def cancel_contest_creation(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = users_col.find_one({"telegram_id": message.from_user.id})

    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=types.ReplyKeyboardRemove())
        return

    # –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è
    result = contests_col.delete_one({
        "telegram_id": message.from_user.id,
        "step": {"$ne": None}  # –ò—â–µ–º –∫–æ–Ω–∫—É—Ä—Å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —à–∞–≥ –Ω–µ —Ä–∞–≤–µ–Ω None
    })

    if result.deleted_count > 0:
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                             reply_markup=await send_role_keyboard(message.bot, message.from_user.id, user.get("role")))
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                             reply_markup=await send_role_keyboard(message.bot, message.from_user.id, user.get("role")))


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
@router.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å")
async def add_contest(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è
    active_contest = contests_col.find_one({
        "telegram_id": message.from_user.id,
        "step": {"$ne": None}  # –ò—â–µ–º –∫–æ–Ω–∫—É—Ä—Å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —à–∞–≥ –Ω–µ —Ä–∞–≤–µ–Ω None
    })

    if active_contest:
        await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.")
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º _id
    contest_id = ObjectId()  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
    contests_col.insert_one({
        "_id": contest_id,
        "telegram_id": message.from_user.id,
        "step": "name",  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥
        "files": []
    })
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞:", reply_markup=create_cancel_keyboard())


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
@router.message(lambda message: contests_col.find_one({"telegram_id": message.from_user.id, "step": "name"}))
async def process_contest_name(message: types.Message):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ —Ç–µ–∫—Å—Ç–æ–º.")
        return
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—É—Ä—Å, –¥–æ–±–∞–≤–ª—è—è –Ω–∞–∑–≤–∞–Ω–∏–µ
    contests_col.update_one(
        {"telegram_id": message.from_user.id, "step": "name"},
        {"$set": {"name": message.text, "step": "dates"}}
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì):",
                         reply_markup=create_cancel_keyboard())


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã –∫–æ–Ω–∫—É—Ä—Å–∞
@router.message(lambda message: contests_col.find_one({"telegram_id": message.from_user.id, "step": "dates"}))
async def process_contest_dates(message: types.Message):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        return

    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
        dates = message.text.split(" - ")

        if len(dates) == 1:
            # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            end_date = datetime.strptime(dates[0].strip(), "%d.%m.%Y")
            start_date = None
        elif len(dates) == 2:
            # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            start_date = datetime.strptime(dates[0].strip(), "%d.%m.%Y")
            end_date = datetime.strptime(dates[1].strip(), "%d.%m.%Y")

            if start_date > end_date:
                await message.answer("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç. –í–≤–µ–¥–∏—Ç–µ '–î–î.–ú–ú.–ì–ì–ì–ì' –∏–ª–∏ '–î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì'.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—É—Ä—Å, –¥–æ–±–∞–≤–ª—è—è –¥–∞—Ç—ã
        contests_col.update_one(
            {"telegram_id": message.from_user.id, "step": "dates"},
            {"$set": {
                "start_date": start_date,
                "end_date": end_date,
                "step": "description"
            }}
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞:", reply_markup=create_cancel_keyboard())

    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç. –í–≤–µ–¥–∏—Ç–µ '–î–î.–ú–ú.–ì–ì–ì–ì' –∏–ª–∏ '–î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì'.")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
@router.message(lambda message: contests_col.find_one({"telegram_id": message.from_user.id, "step": "description"}))
async def process_contest_description(message: types.Message):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ —Ç–µ–∫—Å—Ç–æ–º.")
        return
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—É—Ä—Å, –¥–æ–±–∞–≤–ª—è—è –æ–ø–∏—Å–∞–Ω–∏–µ
    contests_col.update_one(
        {"telegram_id": message.from_user.id, "step": "description"},
        {"$set": {"description": message.text, "step": "file"}}
    )
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (pdf, docx, doc, xlsx). –ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤, –Ω–∞–∂–º–∏—Ç–µ /done.",
                         reply_markup=create_cancel_keyboard())


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
@router.message(lambda message: contests_col.find_one({"telegram_id": message.from_user.id, "step": "file"}))
async def process_contest_file(message: types.Message):
    if message.document:
        file_ext = message.document.file_name.split(".")[-1].lower()
        if file_ext not in ["pdf", "docx", "doc", "xlsx"]:
            await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ pdf, docx, doc, xlsx.")
            return

        file_id = message.document.file_id
        file = await message.bot.get_file(file_id)
        file_path = file.file_path
        file_name = message.document.file_name
        await message.bot.download_file(file_path, os.path.join("uploads", file_name))

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω–∫—É—Ä—Å–∞
        contests_col.update_one(
            {"telegram_id": message.from_user.id, "step": "file"},
            {"$push": {"files": file_name}}
        )
        await message.answer(f"–§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done.")
    elif message.text == "/done":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª /done, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤
        contest = contests_col.find_one({"telegram_id": message.from_user.id, "step": "file"})
        if contest:
            contests_col.update_one(
                {"telegram_id": message.from_user.id, "step": "file"},
                {"$set": {"step": "responsible"}}
            )
            await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ –∫–æ–Ω–∫—É—Ä—Å.")
            await show_responsible_list(message)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                             reply_markup=create_cancel_keyboard())


#  –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–æ–≤
@router.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å—ã")
async def edit_contests(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤
    contests = list(contests_col.find().sort("start_date", 1))

    if not contests:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for contest in contests:
        contest_name = contest["name"]
        end_date = contest["end_date"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ —Å –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
        if datetime.now() > end_date + timedelta(weeks=2):
            contest_name += " üóëÔ∏è"  # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–æ–∫ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É–¥–∞–ª–∏—Ç—å

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–Ω–∫—É—Ä—Å–∞
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text=contest_name, callback_data=f"select_contest_{contest['_id']}")]
        )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—É—Ä—Å–∞
@router.callback_query(lambda query: query.data.startswith("select_contest_"))
async def select_contest(query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–Ω–∫—É—Ä—Å–∞ –∏–∑ callback_data
    contest_id = query.data.split("_")[2]

    # –ò—â–µ–º –∫–æ–Ω–∫—É—Ä—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    contest = contests_col.find_one({"_id": ObjectId(contest_id)})

    if not contest:
        await query.answer("–ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_contest_{contest_id}")]
    ])

    await query.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—É—Ä—Å: {contest['name']}. –£–¥–∞–ª–∏—Ç—å –µ–≥–æ?",
        reply_markup=keyboard
    )


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
@router.callback_query(lambda query: query.data.startswith("delete_contest_"))
async def delete_contest(query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–Ω–∫—É—Ä—Å–∞ –∏–∑ callback_data
    contest_id = query.data.split("_")[2]

    # –ò—â–µ–º –∫–æ–Ω–∫—É—Ä—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    contest = contests_col.find_one({"_id": ObjectId(contest_id)})

    if not contest:
        await query.answer("–ö–æ–Ω–∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—É—Ä—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    result = contests_col.delete_one({"_id": ObjectId(contest_id)})

    if result.deleted_count > 0:
        await query.message.edit_text(f"–ö–æ–Ω–∫—É—Ä—Å '{contest['name']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await query.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å.") 
import os
from datetime import datetime, timedelta

from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bson import ObjectId

from config import logger
from services.database import users_col
from utils.user_utils import show_user_list
from utils.role_utils import send_role_keyboard

router = Router()


@router.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def add_admin(message: types.Message):
    await show_user_list(message, "admin")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
@router.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ")
async def add_responsible(message: types.Message):
    await show_user_list(message, "responsible")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@router.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
async def add_teacher(message: types.Message):
    await show_user_list(message, "teacher")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.message(lambda message: message.text == "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def show_users_list(message: types.Message):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é show_user_list –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await show_user_list(message, "view_user_info")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@router.callback_query(lambda query: query.data.startswith("userinfo_"))
async def view_user_info_handler(query: types.CallbackQuery):
    logger.info(query.data)
    parts = query.data.split("_")
    logger.info(parts)
    if len(parts) < 3:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    _, user_id, role = parts[0], parts[1], "_".join(parts[2:])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏ –¥–ª—è —Ä–æ–ª–∏

    # –ï—Å–ª–∏ —Ä–æ–ª—å "view_user_info", –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    logger.info(role)
    if role == "view_user_info":
        user = users_col.find_one({"telegram_id": int(user_id)})
        if not user:
            await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = (
            f"üë§ –ò–º—è: {user.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üÜî Telegram ID: {user.get('telegram_id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üé≠ –†–æ–ª—å: {user.get('role', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if user.get('notifications_enabled', False) else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç
        user_info += "\n\n‚ÑπÔ∏è –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –Ω–∞–π–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –ø–æ Telegram ID."

        # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"confirm_delete_user_{user_id}")]
        ])

        await query.message.edit_text(user_info, reply_markup=keyboard)
        await query.answer()
        return

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(lambda query: query.data.startswith("confirm_delete_user_"))
async def confirm_delete_user_handler(query: types.CallbackQuery):
    user_id = query.data.split("_")[3]  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data

    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_user_{user_id}")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete_user_{user_id}")]
    ])

    await query.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
        reply_markup=keyboard
    )
    await query.answer()


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(lambda query: query.data.startswith("delete_user_"))
async def delete_user_handler(query: types.CallbackQuery):
    user_id = query.data.split("_")[2]  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = users_col.find_one({"telegram_id": int(user_id)})
    if not user:
        await query.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await query.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user.get("role") == "admin":
        await query.message.edit_text("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é '–∞–¥–º–∏–Ω'.")
        await query.answer()
        return

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    result = users_col.delete_one({"telegram_id": int(user_id)})

    if result.deleted_count > 0:
        await query.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await query.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    await query.answer()


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(lambda query: query.data.startswith("cancel_delete_user_"))
async def cancel_delete_user_handler(query: types.CallbackQuery):
    user_id = query.data.split("_")[3]  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await view_user_info_handler(query)
    await query.answer()


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –±—É–∫–≤—ã
@router.callback_query(lambda query: query.data.startswith("letter_"))
async def process_letter_selection(query: types.CallbackQuery):
    parts = query.data.split("_")
    if len(parts) < 3:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    _, letter, role = parts[0], parts[1], "_".join(parts[2:])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏ –¥–ª—è —Ä–æ–ª–∏

    users = list(users_col.find({"full_name": {"$regex": f"^{letter}", "$options": "i"}}).sort("full_name", 1))
    if not users:
        await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for user in users:
        if role == "view_user_info":
            # –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            callback_data = f"userinfo_{user['telegram_id']}_view_user_info"
        else:
            # –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            callback_data = f"usereditrole_{user['telegram_id']}_{role}"

        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text=user["full_name"], callback_data=callback_data)]
        )

    await query.message.edit_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —Ñ–∞–º–∏–ª–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞ {letter}:", reply_markup=keyboard)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(lambda query: query.data.startswith("usereditrole_"))
async def process_user_selection(query: types.CallbackQuery):
    logger.info(f"Callback data: {query.data}")
    _, user_id, role = query.data.split("_")
    user_id = int(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user = users_col.find_one({"telegram_id": user_id})
    if user and user.get("role") == "admin":
        await query.answer("–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_col.update_one({"telegram_id": user_id}, {"$set": {"role": role}})
    await query.answer(f"–†–æ–ª—å '{role}' —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–π —Ä–æ–ª–∏
    try:
        await query.bot.send_message(user_id, f"–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å: {role}.")
        await send_role_keyboard(query.bot, user_id, role)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await query.message.edit_text(f"–†–æ–ª—å '{role}' –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
@router.callback_query(lambda query: query.data.startswith("show_all_users_"))
async def show_all_users_handler(query: types.CallbackQuery):
    _, role = query.data.split("_", 2)[0], query.data.split("_", 2)[2]  # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ callback_data
    
    users = list(users_col.find({"full_name": {"$exists": True}}).sort("full_name", 1))
    if not users:
        await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_text = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for i, user in enumerate(users, 1):
        user_text += f"{i}. {user.get('full_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} - {user.get('role', '–ë–µ–∑ —Ä–æ–ª–∏')}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_letters_{role}")]
    ])
    
    await query.message.edit_text(user_text, reply_markup=keyboard)
    await query.answer()

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ –≤—ã–±–æ—Ä—É –±—É–∫–≤
@router.callback_query(lambda query: query.data.startswith("back_to_letters_"))
async def back_to_letters_handler(query: types.CallbackQuery):
    role = query.data.split("_")[3]  # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ callback_data
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã–±–æ—Ä–æ–º –±—É–∫–≤
    await show_user_list(query.message, role)
    await query.answer() 
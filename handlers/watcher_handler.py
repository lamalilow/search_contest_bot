from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from datetime import datetime
import io
from aiogram.types import BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import calendar
from bson import ObjectId
import logging

from utils.self_assessment_utils import generate_monthly_report, create_excel_report
from services.database import db

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

router = Router()

# –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
RUSSIAN_MONTHS = {
    1: "–Ø–Ω–≤–∞—Ä—å",
    2: "–§–µ–≤—Ä–∞–ª—å",
    3: "–ú–∞—Ä—Ç",
    4: "–ê–ø—Ä–µ–ª—å",
    5: "–ú–∞–π",
    6: "–ò—é–Ω—å",
    7: "–ò—é–ª—å",
    8: "–ê–≤–≥—É—Å—Ç",
    9: "–°–µ–Ω—Ç—è–±—Ä—å",
    10: "–û–∫—Ç—è–±—Ä—å",
    11: "–ù–æ—è–±—Ä—å",
    12: "–î–µ–∫–∞–±—Ä—å"
}

class ReportState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    selecting_month = State()

@router.message(Command("get_report"))
async def cmd_get_report(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_report –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å watcher
    user = db.users.find_one({"telegram_id": message.from_user.id})
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_roles = user.get("role") if user else None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–æ–ª—å watcher
    has_watcher_role = False
    if isinstance(user_roles, list):
        has_watcher_role = "watcher" in user_roles
    elif isinstance(user_roles, str):
        has_watcher_role = user_roles == "watcher"
    
    if not user or not has_watcher_role:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Å—è—Ü—ã –∏ –≥–æ–¥—ã –∏–∑ –∑–∞–ø–∏—Å–µ–π —Å–∞–º–æ–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    available_months = set()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–∞–º–æ–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    self_assessments = list(db.self_assessments.find())
    
    for assessment in self_assessments:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
        created_at = assessment.get("created_at")
        if created_at:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç datetime, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            if isinstance(created_at, str):
                try:
                    created_at = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                except ValueError:
                    continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
            available_months.add((created_at.year, created_at.month))
    
    if not available_months:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å–∞–º–æ–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—è—Ü—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    available_months = sorted(available_months, reverse=True)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Å—è—Ü–∞–º–∏
    keyboard = []
    row = []
    
    for year, month in available_months:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        month_name = RUSSIAN_MONTHS.get(month, f"–ú–µ—Å—è—Ü {month}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
        row.append({
            "text": f"{month_name} {year}",
            "callback_data": f"report_{year}_{month}"
        })
        
        # –ü–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 2 –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if len(row) == 2 or (year, month) == available_months[-1]:
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([{"text": "–û—Ç–º–µ–Ω–∞", "callback_data": "cancel_report"}])
    
    await state.set_state(ReportState.selecting_month)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç:",
        reply_markup={"inline_keyboard": keyboard}
    )

@router.callback_query(F.data.startswith("report_"))
async def process_month_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ–¥ –∏ –º–µ—Å—è—Ü –∏–∑ callback_data
    _, year, month = callback.data.split("_")
    year = int(year)
    month = int(month)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    data, images = await generate_monthly_report(month, year)
    
    if not data:
        await callback.message.answer("–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
    excel_data = await create_excel_report(data, images)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    await callback.message.answer_document(
        document=BufferedInputFile(
            excel_data,
            filename=f"report_{year}_{month:02d}.xlsx"
        ),
        caption=f"–û—Ç—á–µ—Ç –∑–∞ {RUSSIAN_MONTHS[month]} {year}"
    )
    
    await callback.answer()

@router.callback_query(ReportState.selecting_month, F.data == "cancel_report")
async def cancel_report(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
    await state.clear()
    await callback.message.edit_text("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.answer()

@router.message(Command("watcher"))
async def cmd_watcher(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /watcher –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å watcher
    user = db.users.find_one({"telegram_id": message.from_user.id})
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_roles = user.get("role") if user else None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–æ–ª—å watcher
    has_watcher_role = False
    if isinstance(user_roles, list):
        has_watcher_role = "watcher" in user_roles
    elif isinstance(user_roles, str):
        has_watcher_role = user_roles == "watcher"
    
    if not user or not has_watcher_role:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è.")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
    await message.answer(
        "üîç <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è:</b>\n\n"
        "/get_report - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Å–∞–º–æ–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü\n"
        "/notify_assessment - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ª–∏—Å—Ç–∞ —Å–∞–º–æ–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
        parse_mode="HTML"
    )

@router.message(Command("notify_assessment"))
async def cmd_notify_assessment(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ª–∏—Å—Ç–∞ —Å–∞–º–æ–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å watcher
    user = db.users.find_one({"telegram_id": message.from_user.id})
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_roles = user.get("role") if user else None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–æ–ª—å watcher
    has_watcher_role = False
    if isinstance(user_roles, list):
        has_watcher_role = "watcher" in user_roles
    elif isinstance(user_roles, str):
        has_watcher_role = user_roles == "watcher"
    
    if not user or not has_watcher_role:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    all_users = list(db.users.find())
    
    if not all_users:
        await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∞–º–æ–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ª–∏—Å—Ç —Å–∞–º–æ–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", callback_data="open_self_assessment")]
    ])
    
    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    success_count = 0
    error_count = 0
    
    # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Ç–æ–º –æ–±–Ω–æ–≤–∏–º
    progress_message = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for user_data in all_users:
        try:
            user_id = user_data.get("telegram_id")
            if user_id:
                await message.bot.send_message(
                    chat_id=user_id,
                    text="üìã <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–∞–º–æ–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏</b>\n\n"
                         "–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n"
                         "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ª–∏—Å—Ç —Å–∞–º–æ–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. "
                         "–≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /self_assessment.",
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                success_count += 1
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            else:
                error_count += 1
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ ID: {user_data}")
        except Exception as e:
            error_count += 1
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data.get('telegram_id')}: {str(e)}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (success_count + error_count) % 10 == 0:
            try:
                await progress_message.edit_text(
                    f"‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {success_count + error_count}/{len(all_users)}\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                    f"‚ùå –° –æ—à–∏–±–∫–∞–º–∏: {error_count}"
                )
            except:
                pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    await progress_message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {error_count}",
        parse_mode="HTML"
    )

@router.callback_query(F.data == "open_self_assessment")
async def open_self_assessment(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ª–∏—Å—Ç–∞ —Å–∞–º–æ–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—É—Å–∫–æ–º –∫–æ–º–∞–Ω–¥—ã self_assessment
    await callback.message.answer(
        "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –≤–∞—Å –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å–∞–º–æ–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è..."
    )
    
    # –í–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    from handlers.self_assessment_handler import cmd_self_assessment
    await cmd_self_assessment(callback.message, state)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π state
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∑–∞–ø—Ä–æ—Å
    await callback.answer() 
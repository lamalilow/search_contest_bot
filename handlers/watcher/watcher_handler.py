from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from datetime import datetime
import io
from aiogram.types import BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import calendar
from bson import ObjectId
import logging

from utils.contest_utils import generate_contest_report, create_contest_excel_report, create_contest_html_report
from services.database import db

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

router = Router()

# –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
RUSSIAN_MONTHS = {
    1: "–Ø–Ω–≤–∞—Ä—å",
    2: "–§–µ–≤—Ä–∞–ª—å",
    3: "–ú–∞—Ä—Ç",
    4: "–ê–ø—Ä–µ–ª—å",
    5: "–ú–∞–π",
    6: "–ò—é–Ω—å",
    7: "–ò—é–ª—å",
    8: "–ê–≤–≥—É—Å—Ç",
    9: "–°–µ–Ω—Ç—è–±—Ä—å",
    10: "–û–∫—Ç—è–±—Ä—å",
    11: "–ù–æ—è–±—Ä—å",
    12: "–î–µ–∫–∞–±—Ä—å"
}

class ReportState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    selecting_month = State()

@router.message(Command("get_report"))
async def cmd_get_report(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_report –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å watcher
    user = db.users.find_one({"telegram_id": message.from_user.id})
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_roles = user.get("role") if user else None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–æ–ª—å watcher
    has_watcher_role = False
    if isinstance(user_roles, list):
        has_watcher_role = "watcher" in user_roles
    elif isinstance(user_roles, str):
        has_watcher_role = user_roles == "watcher"
    
    if not user or not has_watcher_role:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Å—è—Ü—ã –∏ –≥–æ–¥—ã –∏–∑ –∑–∞–ø–∏—Å–µ–π —Å–∞–º–æ–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    available_months = set()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–∞–º–æ–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    participations = list(db.contest_participations.find())
    
    for part in participations:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
        created_at = part.get("created_at")
        if created_at:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç datetime, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            if isinstance(created_at, str):
                try:
                    created_at = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                except ValueError:
                    continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
            available_months.add((created_at.year, created_at.month))
    
    if not available_months:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—è—Ü—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    available_months = sorted(available_months, reverse=True)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Å—è—Ü–∞–º–∏
    keyboard = []
    row = []
    
    for year, month in available_months:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        month_name = RUSSIAN_MONTHS.get(month, f"–ú–µ—Å—è—Ü {month}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
        row.append({
            "text": f"{month_name} {year}",
            "callback_data": f"report_{year}_{month}"
        })
        
        # –ü–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 2 –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if len(row) == 2 or (year, month) == available_months[-1]:
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([{"text": "–û—Ç–º–µ–Ω–∞", "callback_data": "cancel_report"}])
    
    await state.set_state(ReportState.selecting_month)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç:",
        reply_markup={"inline_keyboard": keyboard}
    )

@router.callback_query(F.data.startswith("report_"))
async def process_month_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ–¥ –∏ –º–µ—Å—è—Ü –∏–∑ callback_data
    _, year, month = callback.data.split("_")
    year = int(year)
    month = int(month)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    data, images = await generate_contest_report(month, year)
    
    if not data:
        await callback.message.answer("–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
    excel_data = await create_contest_excel_report(data, images)
    
    # –°–æ–∑–¥–∞–µ–º HTML —Ñ–∞–π–ª
    html_report = await create_contest_html_report(data, images)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
    await callback.message.answer_document(
        document=BufferedInputFile(
            excel_data,
            filename=f"contest_report_{year}_{month:02d}.xlsx"
        ),
        caption=f"–û—Ç—á–µ—Ç –ø–æ –∫–æ–Ω–∫—É—Ä—Å–∞–º –∑–∞ {RUSSIAN_MONTHS[month]} {year} (Excel)"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML —Ñ–∞–π–ª
    await callback.message.answer_document(
        document=BufferedInputFile(
            html_report.encode('utf-8'),
            filename=f"contest_report_{year}_{month:02d}.html"
        ),
        caption=f"–û—Ç—á–µ—Ç –ø–æ –∫–æ–Ω–∫—É—Ä—Å–∞–º –∑–∞ {RUSSIAN_MONTHS[month]} {year} (HTML —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)"
    )
    
    await callback.answer()

@router.callback_query(ReportState.selecting_month, F.data == "cancel_report")
async def cancel_report(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
    await state.clear()
    await callback.message.edit_text("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.answer()

@router.message(Command("watcher"))
async def cmd_watcher(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /watcher –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å watcher
    user = db.users.find_one({"telegram_id": message.from_user.id})
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_roles = user.get("role") if user else None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–æ–ª—å watcher
    has_watcher_role = False
    if isinstance(user_roles, list):
        has_watcher_role = "watcher" in user_roles
    elif isinstance(user_roles, str):
        has_watcher_role = user_roles == "watcher"
    
    if not user or not has_watcher_role:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è.")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
    await message.answer(
        "üîç <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è:</b>\n\n"
        "/get_report - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∫–æ–Ω–∫—É—Ä—Å–∞–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü\n",
        parse_mode="HTML"
    )

